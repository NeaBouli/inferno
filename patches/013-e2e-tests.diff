*** Begin Patch
diff --git a/testing/EndToEnd.test.js b/testing/EndToEnd.test.js
new file mode 100644
--- /dev/null
+++ b/testing/EndToEnd.test.js
@@
+const { expect } = require("chai");
+
+describe("End-to-End Flow", function () {
+  let InfernoToken, Presale, VestingSimple, BurnReserve;
+  let token, presale, vesting, burnreserve;
+  let owner, investor, treasury;
+
+  beforeEach(async function () {
+    [owner, investor, treasury] = await ethers.getSigners();
+
+    // Deploy Token
+    InfernoToken = await ethers.getContractFactory("InfernoToken");
+    token = await InfernoToken.deploy(treasury.address);
+    await token.deployed();
+
+    // Deploy Presale
+    Presale = await ethers.getContractFactory("Presale");
+    presale = await Presale.deploy(token.address, treasury.address, 1000);
+    await presale.deployed();
+
+    // Approve Presale to move owner's tokens
+    await token.connect(owner).approve(presale.address, ethers.constants.MaxUint256);
+
+    // Deploy BurnReserve
+    BurnReserve = await ethers.getContractFactory("BurnReserve");
+    burnreserve = await BurnReserve.deploy(token.address);
+    await burnreserve.deployed();
+
+    // Deploy VestingSimple (start=now, cliff=60s, duration=600s)
+    const now = Math.floor(Date.now() / 1000);
+    VestingSimple = await ethers.getContractFactory("VestingSimple");
+    vesting = await VestingSimple.deploy(token.address, investor.address, now, 60, 600);
+    await vesting.deployed();
+
+    // Fund Vesting contract
+    await token.transfer(vesting.address, 1000n * 10n ** 9n);
+  });
+
+  it("should run full Presale → Vesting → Burn flow", async function () {
+    // Investor kauft 1 ETH an Tokens
+    const ethAmount = ethers.utils.parseEther("1");
+    await expect(() => presale.connect(investor).buyTokens({ value: ethAmount }))
+      .to.changeEtherBalances([investor, treasury], [ethAmount.mul(-1), ethAmount]);
+
+    // Investor erhält Tokens
+    const balance = await token.balanceOf(investor.address);
+    expect(balance).to.be.gt(0);
+
+    // Vor Cliff: Vesting darf nichts freigeben
+    await expect(vesting.connect(investor).release()).to.be.revertedWith("Nothing to release");
+
+    // Treasury überträgt Tokens an BurnReserve
+    await token.connect(owner).transfer(burnreserve.address, 500n * 10n ** 9n);
+    const reserveBalance = await token.balanceOf(burnreserve.address);
+    expect(reserveBalance).to.be.gt(0);
+  });
+});
diff --git a/logs/project.log b/logs/project.log
index 83c1f19..64d5d08 100644
--- a/logs/project.log
+++ b/logs/project.log
@@
 [2025-09-22 15:00] dev DEPLOY – Sepolia Deployment-Skript erstellt (InfernoToken)
+[2025-09-22 15:30] qa E2E – End-to-End Test-Suite erstellt (Presale → Token → Vesting → BurnReserve)
*** End Patch
