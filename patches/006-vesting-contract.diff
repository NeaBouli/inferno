*** Begin Patch
diff --git a/contracts/vesting/VestingSimple.sol b/contracts/vesting/VestingSimple.sol
new file mode 100644
--- /dev/null
+++ b/contracts/vesting/VestingSimple.sol
@@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.20;
+
+import "@openzeppelin/contracts/access/Ownable.sol";
+import "../token/InfernoToken.sol";
+
+/**
+ * @title VestingSimple
+ * @notice Linearer Vesting-Contract mit optionalem Cliff
+ */
+contract VestingSimple is Ownable {
+    InfernoToken public token;
+    address public beneficiary;
+
+    uint64 public start;
+    uint64 public cliff;
+    uint64 public duration;
+
+    uint256 public released;
+
+    event TokensReleased(uint256 amount);
+
+    constructor(
+        address _token,
+        address _beneficiary,
+        uint64 _start,
+        uint64 _cliff,
+        uint64 _duration
+    ) {
+        require(_token != address(0), "Token required");
+        require(_beneficiary != address(0), "Beneficiary required");
+        require(_duration > 0, "Duration required");
+
+        token = InfernoToken(_token);
+        beneficiary = _beneficiary;
+        start = _start;
+        cliff = _start + _cliff;
+        duration = _duration;
+
+        // Vesting ist FeeExempt
+        token.setFeeExempt(address(this), true);
+    }
+
+    function vestedAmount(uint64 timestamp) public view returns (uint256) {
+        if (timestamp < cliff) {
+            return 0;
+        } else if (timestamp >= start + duration) {
+            return token.balanceOf(address(this)) + released;
+        } else {
+            uint256 total = token.balanceOf(address(this)) + released;
+            return (total * (timestamp - start)) / duration;
+        }
+    }
+
+    function release() external {
+        uint64 currentTime = uint64(block.timestamp);
+        uint256 vested = vestedAmount(currentTime);
+        uint256 unreleased = vested - released;
+        require(unreleased > 0, "Nothing to release");
+
+        released += unreleased;
+        token.transfer(beneficiary, unreleased);
+        emit TokensReleased(unreleased);
+    }
+}
diff --git a/testing/VestingSimple.test.js b/testing/VestingSimple.test.js
new file mode 100644
--- /dev/null
+++ b/testing/VestingSimple.test.js
@@
+const { expect } = require("chai");
+
+describe("VestingSimple", function () {
+  let InfernoToken, VestingSimple, token, vesting;
+  let owner, beneficiary, treasury;
+
+  beforeEach(async function () {
+    [owner, beneficiary, treasury] = await ethers.getSigners();
+
+    InfernoToken = await ethers.getContractFactory("InfernoToken");
+    token = await InfernoToken.deploy(treasury.address);
+    await token.deployed();
+
+    const now = Math.floor(Date.now() / 1000);
+    VestingSimple = await ethers.getContractFactory("VestingSimple");
+    vesting = await VestingSimple.deploy(
+      token.address,
+      beneficiary.address,
+      now,
+      60,    // 1min Cliff
+      600    // 10min Duration
+    );
+    await vesting.deployed();
+
+    // Transfer Tokens an Vesting-Contract
+    await token.transfer(vesting.address, 1000n * 10n ** 9n);
+  });
+
+  it("Deployment: should set correct beneficiary and params", async function () {
+    expect(await vesting.beneficiary()).to.equal(beneficiary.address);
+    expect(await vesting.duration()).to.equal(600);
+  });
+
+  it("Release: should not release before cliff", async function () {
+    await expect(vesting.release()).to.be.revertedWith("Nothing to release");
+  });
+});
diff --git a/logs/project.log b/logs/project.log
index 8029cf6..32efc3b 100644
--- a/logs/project.log
+++ b/logs/project.log
@@
 [2025-09-22 11:30] dev PRESALE – Presale.sol Grundgerüst erstellt (ETH→IFR, Treasury-Flow, FeeExempt)
+[2025-09-22 12:00] dev VESTING – VestingSimple.sol Grundgerüst erstellt (linear, Cliff, FeeExempt)
*** End Patch
