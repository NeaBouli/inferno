*** Begin Patch
diff --git a/scripts/docs-publisher.js b/scripts/docs-publisher.js
new file mode 100755
--- /dev/null
+++ b/scripts/docs-publisher.js
@@
+#!/usr/bin/env node
+import fs from "fs";
+import path from "path";
+import os from "os";
+import { execSync } from "child_process";
+
+const root = process.cwd();
+const tmpDir = fs.mkdtempSync(path.join(os.tmpdir(), "inferno-site-"));
+const siteDir = path.join(tmpDir, "_site");
+const docsDirs = ["docs", "reports", "logs"];
+
+let prevBranch = "main";
+try { prevBranch = execSync("git rev-parse --abbrev-ref HEAD").toString().trim(); } catch {}
+
+fs.mkdirSync(siteDir, { recursive: true });
+console.log("üìÅ Created temporary site directory:", siteDir);
+
+for (const d of docsDirs) {
+  const src = path.join(root, d);
+  if (!fs.existsSync(src)) {
+    console.log("‚ö†Ô∏è Missing folder:", src);
+    continue;
+  }
+  const dest = path.join(siteDir, d);
+  fs.cpSync(src, dest, { recursive: true });
+  console.log("‚úÖ Copied:", d);
+}
+
+const indexFile = path.join(siteDir, "index.html");
+fs.writeFileSync(indexFile, `<html><head><meta charset="utf-8"><title>Inferno Docs Portal</title></head><body><h1>üî• Inferno Docs</h1><p>Generated ${new Date().toISOString()}</p></body></html>`);
+console.log("üßæ Created:", indexFile);
+
+const logDir = path.join(root, "logs");
+if (!fs.existsSync(logDir)) fs.mkdirSync(logDir, { recursive: true });
+
+function logLine(line) {
+  fs.appendFileSync(path.join(logDir, "project.log"), line + "\n");
+  fs.appendFileSync(path.join(logDir, "docs-publisher.log"), line + "\n");
+}
+
+const ts = () => new Date().toISOString();
+let commitHash = "unknown";
+try { commitHash = execSync("git rev-parse --short HEAD").toString().trim(); } catch {}
+
+try {
+  console.log("üöÄ Deploying to gh-pages...");
+  execSync("git checkout gh-pages || git checkout -b gh-pages", { stdio: "inherit" });
+  execSync("rm -rf *", { stdio: "inherit" });
+  execSync(`cp -r ${siteDir}/* .`, { stdio: "inherit" });
+  execSync("git add .", { stdio: "inherit" });
+  execSync('git commit -m "docs: publish to gh-pages [auto]" || true', { stdio: "inherit" });
+  execSync("git push origin gh-pages --force", { stdio: "inherit" });
+  console.log("‚úÖ Docs successfully published to GitHub Pages.");
+
+  const okMsg = `[${ts()}] ‚úÖ gh-pages deployed (commit ${commitHash}) TMP=${tmpDir}`;
+  logLine(okMsg);
+  console.log("ü™µ Logged deployment:", okMsg);
+} catch (err) {
+  const failMsg = `[${ts()}] ‚ùå gh-pages deploy failed: ${String(err.message)} TMP=${tmpDir}`;
+  logLine(failMsg);
+  console.error(failMsg);
+} finally {
+  try {
+    execSync(`git checkout ${prevBranch}`, { stdio: "inherit" });
+  } catch (e) {
+    console.error(`‚ö†Ô∏è Failed to restore branch '${prevBranch}':`, e?.message || e);
+  }
+}
*** End Patch
