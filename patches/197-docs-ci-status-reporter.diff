*** Begin Patch
diff --git a/scripts/docs-ci-status.js b/scripts/docs-ci-status.js
new file mode 100755
--- /dev/null
+++ b/scripts/docs-ci-status.js
@@
+#!/usr/bin/env node
+/**
+ * üß© Inferno Docs CI Status Reporter
+ * Liest den letzten Validation-Report und erzeugt einen kompakten CI-Status-Report.
+ * Wird nach CI-L√§ufen oder manuell aufgerufen.
+ */
+
+import fs from "fs";
+import path from "path";
+import { execSync } from "child_process";
+
+const root = process.cwd();
+const reportFile = path.join(root, "reports/docs-validation-report.md");
+const ciStatusFile = path.join(root, "reports/docs-ci-status.md");
+const ts = () => new Date().toISOString();
+
+let statusIcon = "‚ùå";
+let summary = "Validation report missing or invalid.";
+
+try {
+  if (fs.existsSync(reportFile)) {
+    const data = fs.readFileSync(reportFile, "utf8");
+    const ok = !data.includes("‚ùå");
+    statusIcon = ok ? "‚úÖ" : "‚ùå";
+    const lines = data.split("\n").slice(0, 15).join("\n");
+    summary = ok
+      ? "All documentation checks passed successfully."
+      : "Some documentation errors were found. Please review the report.";
+  } else {
+    summary = "No validation report found.";
+  }
+} catch (e) {
+  summary = `Error reading validation report: ${e.message}`;
+}
+
+let commitHash = "unknown";
+try {
+  commitHash = execSync("git rev-parse --short HEAD").toString().trim();
+} catch {}
+
+const content = `# üìä Inferno Docs CI Status
+
+**Timestamp:** ${ts()}  
+**Commit:** ${commitHash}  
+**Status:** ${statusIcon}
+
+---
+
+${summary}
+
+---
+
+*(Auto-generated by docs-ci-status.js)*`;
+
+fs.writeFileSync(ciStatusFile, content, "utf8");
+console.log(`‚úÖ CI status file written ‚Üí ${ciStatusFile}`);
+
+try {
+  fs.appendFileSync(
+    path.join("logs", "project.log"),
+    `[${ts()}] CI Status Reporter executed (${statusIcon}) ‚Üí ${ciStatusFile}\n`
+  );
+} catch {}
*** End Patch
