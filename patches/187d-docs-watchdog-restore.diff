*** Begin Patch
diff --git a/scripts/docs-watchdog.js b/scripts/docs-watchdog.js
--- /dev/null
+++ b/scripts/docs-watchdog.js
@@
+#!/usr/bin/env node
+/**
+ * üîí Inferno Docs Watchdog
+ * Pr√ºft, ob Dokumentationsdateien √§lter als 24h sind,
+ * schreibt immer ein Logfile, auch wenn alles aktuell ist.
+ */
+
+import fs from "fs";
+import path from "path";
+
+const root = process.cwd();
+const logDir = path.join(root, "logs");
+const logFile = path.join(logDir, "docs-watchdog.log");
+
+// üü° Init
+console.log("[Watchdog] üü° Initialized at", new Date().toISOString());
+try {
+  fs.mkdirSync(logDir, { recursive: true });
+  console.log("[Watchdog] üìÅ Log directory ready:", logDir);
+} catch (err) {
+  console.error("[Watchdog] ‚ùå Failed to create log dir:", err.message);
+}
+
+const dirs = ["docs", "reports", "logs"];
+const cutoff = Date.now() - 24 * 60 * 60 * 1000; // 24h
+let outdated = [];
+
+for (const d of dirs) {
+  const fullPath = path.join(root, d);
+  if (!fs.existsSync(fullPath)) continue;
+
+  const files = fs.readdirSync(fullPath);
+  for (const f of files) {
+    const p = path.join(fullPath, f);
+    const stat = fs.statSync(p);
+    if (stat.isFile() && stat.mtimeMs < cutoff) {
+      outdated.push(p);
+    }
+  }
+}
+
+if (outdated.length === 0) {
+  console.log("‚úÖ All docs fresh ‚Äî no action required.");
+  fs.appendFileSync(
+    logFile,
+    `[${new Date().toISOString()}] ‚úÖ All docs fresh ‚Äî no outdated files\n`
+  );
+  process.exit(0);
+}
+
+console.log("[Watchdog] ‚ö†Ô∏è  Outdated files found:", outdated.length);
+for (const f of outdated) console.log(" -", f);
+
+fs.appendFileSync(
+  logFile,
+  `[${new Date().toISOString()}] ‚ö†Ô∏è Outdated ${outdated.length} files\n`
+);
+
+console.log("[Watchdog] üßæ Log written:", logFile);
*** End Patch
